apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hbase.name" . }}-hbase-configmap
  labels:
    app: {{ template "hbase.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  bootstrap.sh: |
    #!/bin/bash

    set -x
 
    : ${HBASE_HOME:=/usr/local/hbase}

    # disable default zookeeper
    sed -i 's/# export HBASE_MANAGES_ZK=true/export HBASE_MANAGES_ZK=false/' $HBASE_HOME/conf/hbase-env.sh

    . $HBASE_HOME/conf/hbase-env.sh

    # Directory to find config artifacts
    CONFIG_DIR="/tmp/hbase-config"

    # Copy config files from volume mount
    for f in hbase-site.xml; do
      if [[ -e ${CONFIG_DIR}/$f ]]; then
        cp ${CONFIG_DIR}/$f $HBASE_HOME/conf/$f
      else
        echo "ERROR: Could not find $f in $CONFIG_DIR"
        exit 1
      fi
    done

    if [[ "${HOSTNAME}" =~ "hbase-master" ]]; then
      $HBASE_HOME/bin/hbase-daemon.sh --config $HBASE_HOME/conf start master
    fi

    if [[ "${HOSTNAME}" =~ "hbase-rs" ]]; then
      #  wait up to 30 seconds for namenode
      (while [[ $count -lt 15 && -z `curl -sf http://{{ template "hbase.name" . }}-hbase-master:16010` ]]; do ((count=count+1)) ; echo "Waiting for {{ template "hbase.name" . }}-hbase-master" ; sleep 2; done && [[ $count -lt 15 ]])
      [[ $? -ne 0 ]] && echo "Timeout waiting for hbase-master, exiting." && exit 1

      $HBASE_HOME/bin/hbase-daemon.sh --config $HBASE_HOME/conf start regionserver
    fi

    if [[ $1 == "-d" ]]; then
      until find ${HBASE_HOME}/logs -mmin -1 | egrep -q '.*'; echo "`date`: Waiting for logs..." ; do sleep 2 ; done
      tail -F ${HBASE_HOME}/logs/* &
      while true; do sleep 1000; done
    fi

    if [[ $1 == "-bash" ]]; then
      /bin/bash
    fi

  hbase-site.xml: |
    <?xml version="1.0"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

    <configuration>
      <property>
        <name>hbase.master</name>
        <value>{{ template "hbase.name" . }}-hbase-master:16010</value>
      </property>
      <property>
        <name>zookeeper.znode.parent</name>
        <value>/hbase</value>
      </property>
      <property>
        <name>hbase.rootdir</name>
        <value>hdfs://{{ .Values.hbase.hadoop.rootdir }}/hbase</value>
      </property>
      <property>
        <name>hbase.cluster.distributed</name>
        <value>true</value>
      </property>
      <property>
        <name>hbase.zookeeper.quorum</name>
        <value>{{ .Values.hbase.zookeeper.quorum }}</value>
      </property>
      <property>
        <name>hbase.zookeeper.property.ClientPort</name>
        <value>2181</value>
      </property>
    </configuration>

  create_table.sh: |
    #!/bin/sh
    # Small script to setup the HBase tables used by OpenTSDB.
    
    test -n "$HBASE_HOME" || {
      echo >&2 'The environment variable HBASE_HOME must be set'
      exit 1
    }
    test -d "$HBASE_HOME" || {
      echo >&2 "No such directory: HBASE_HOME=$HBASE_HOME"
      exit 1
    }
    
    TSDB_TABLE=${TSDB_TABLE-'tsdb'}
    UID_TABLE=${UID_TABLE-'tsdb-uid'}
    TREE_TABLE=${TREE_TABLE-'tsdb-tree'}
    META_TABLE=${META_TABLE-'tsdb-meta'}
    BLOOMFILTER=${BLOOMFILTER-'ROW'}
    # LZO requires lzo2 64bit to be installed + the hadoop-gpl-compression jar.
    COMPRESSION=${COMPRESSION-'LZO'}
    # All compression codec names are upper case (NONE, LZO, SNAPPY, etc).
    COMPRESSION=`echo "$COMPRESSION" | tr a-z A-Z`
    # DIFF encoding is very useful for OpenTSDB's case that many small KVs and common prefix.
    # This can save a lot of storage space.
    DATA_BLOCK_ENCODING=${DATA_BLOCK_ENCODING-'DIFF'}
    DATA_BLOCK_ENCODING=`echo "$DATA_BLOCK_ENCODING" | tr a-z A-Z`
    TSDB_TTL=${TSDB_TTL-'FOREVER'}
    
    case $COMPRESSION in
      (NONE|LZO|GZIP|SNAPPY)  :;;  # Known good.
      (*)
        echo >&2 "warning: compression codec '$COMPRESSION' might not be supported."
        ;;
    esac
    
    case $DATA_BLOCK_ENCODING in
      (NONE|PREFIX|DIFF|FAST_DIFF|ROW_INDEX_V1)  :;; # Know good
      (*)
        echo >&2 "warning: encoding '$DATA_BLOCK_ENCODING' might not be supported."
        ;;
    esac
    
    # HBase scripts also use a variable named `HBASE_HOME', and having this
    # variable in the environment with a value somewhat different from what
    # they expect can confuse them in some cases.  So rename the variable.
    hbh=$HBASE_HOME
    unset HBASE_HOME
    exec "$hbh/bin/hbase" shell <<EOF
    create '$UID_TABLE',
      {NAME => 'id', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER', DATA_BLOCK_ENCODING => '$DATA_BLOCK_ENCODING'},
      {NAME => 'name', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER', DATA_BLOCK_ENCODING => '$DATA_BLOCK_ENCODING'}
    
    create '$TSDB_TABLE',
      {NAME => 't', VERSIONS => 1, COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER', DATA_BLOCK_ENCODING => '$DATA_BLOCK_ENCODING', TTL => '2147483647'}
      
    create '$TREE_TABLE',
      {NAME => 't', VERSIONS => 1, COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER', DATA_BLOCK_ENCODING => '$DATA_BLOCK_ENCODING'}
      
    create '$META_TABLE',
      {NAME => 'name', COMPRESSION => '$COMPRESSION', BLOOMFILTER => '$BLOOMFILTER', DATA_BLOCK_ENCODING => '$DATA_BLOCK_ENCODING'}
    EOF
